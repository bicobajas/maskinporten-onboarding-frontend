{
  "node": [

  ],
  "java": [
    " public static void main(String[] args) throws Exception {",
    "",
    "    KeyStore keyStore = KeyStore.getInstance(\"JKS\");",
    "    String keystorepassword = \"keystorepassword\";",
    "    String alias = \"keystore cert alias\";",
    "",
    "    keyStore.load(new FileInputStream(\"pathToKeystore\"), keystorepassword.toCharArray());",
    "    X509Certificate certificate = (X509Certificate) keyStore.getCertificate(alias);",
    "",
    "    List<Base64> certChain = new ArrayList<>();",
    "    certChain.add(Base64.encode(certificate.getEncoded()));",
    "",
    "    JWSHeader jwtHeader = new JWSHeader.Builder(JWSAlgorithm.RS256)",
    "        .keyID(\"__KID__\")",
    "        .build();",
    "",
    "    JWTClaimsSet claims = new JWTClaimsSet.Builder()",
    "        .audience(\"__MASKINPORTEN_URL__\")",
    "        .claim(\"resource\", \"<your intended audience>\")",
    "        .issuer(\"__CLIENT_ID__\")",
    "        .claim(\"scope\", \"__SCOPE__\")",
    "        .jwtID(UUID.randomUUID().toString()) // Must be unique for each grant",
    "        .issueTime(new Date(Clock.systemUTC().millis())) // Use UTC time!",
    "        .expirationTime(new Date(Clock.systemUTC().millis() + 120000)) // Expiration time is 120 sec.",
    "        .build();",
    "",
    "    PrivateKey privateKey = (PrivateKey) keyStore.getKey(alias, keystorepassword.toCharArray()); // Read from KeyStore",
    "    JWSSigner signer = new RSASSASigner(privateKey);",
    "    SignedJWT signedJWT = new SignedJWT(jwtHeader, claims);",
    "    signedJWT.sign(signer);",
    "",
    "    String jwt = signedJWT.serialize();",
    "",
    "    List body = Form.form()",
    "        .add(\"grant_type\", \"urn:ietf:params:oauth:grant-type:jwt-bearer\")",
    "        .add(\"assertion\", jwt)",
    "        .build();",
    "    try {",
    "        Response response = Request.post(\"__MASKINPORTEN_TOKEN_URL__\")",
    "            .bodyForm(body)",
    "            .execute();",
    "",
    "        HttpEntity e = ((BasicClassicHttpResponse) response.returnResponse()).getEntity();",
    "        String result = EntityUtils.toString(e);",
    "",
    "        // Use access_token in result as authentication header to the service you wish to connect to",
    "",
    "    } catch (Exception e) {",
    "        e.printStackTrace();",
    "    }",
    "",
    "",
    "}"
  ],
  "python": [

  ]
}