{
  "node": [
    "const fetch = require('node-fetch');",
    "const jwt = require('jsonwebtoken');",
    "const fs = require('fs');",
    "const forge = require('node-forge');",
    "",
    "// Variables from integration",
    "const integration_id = '__CLIENT_ID__';",
    "const scope = '__SCOPE__';",
    "",
    "// Varabler om sertifikat",
    "const cert_path = '__CERTIFICATE_PATH__';",
    "const cert_key = '__CERTIFICATE_PASSWORD__';",
    "",
    "// Environment specific variables",
    "const maskinporten_audience = '__MASKINPORTEN_URL__';",
    "const maskinporten_token_url = '__MASKINPORTEN_TOKEN_URL__';",
    "",
    "// Convert p12 Certificate to X.509 encoded string",
    "const cert_binary = fs.readFileSync(cert_path, 'binary');",
    "const p12Asn1 = forge.asn1.fromDer(cert_binary);",
    "const p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, true, cert_key);",
    "const certBags = p12.getBags({bagType: forge.pki.oids.certBag});",
    "const certBag = certBags[forge.pki.oids.certBag][0];",
    "const certPem = forge.pki.certificateToPem(certBag.cert);",
    "const certDer = forge.pki.pemToDer(certPem);",
    "const cert = forge.util.encode64(certDer.data);",
    "",
    "// Get signing key",
    "let key;",
    "let keyBags = p12.getBags({bagType: forge.pki.oids.keyBag});",
    "if (keyBags[forge.pki.oids.keyBag][0]) {",
    "    key = keyBags[forge.pki.oids.keyBag][0].key;",
    "} else {",
    "    keyBags = p12.getBags({bagType: forge.pki.oids.pkcs8ShroudedKeyBag});",
    "    key = keyBags[forge.pki.oids.pkcs8ShroudedKeyBag][0].key;",
    "}",
    "",
    "const jwt_token = jwt.sign(",
    "  {",
    "    scope: scope,",
    "    // resource: '' <-- if resource is needed for this API",
    "  }, {",
    "    key: forge.pki.privateKeyToPem(key)",
    "  }, {",
    "    algorithm: 'RS256',",
    "    audience: maskinporten_audience,",
    "    issuer: integration_id,",
    "    header: {x5c: [cert]},",
    "    expiresIn: 100,",
    "    jwtid: crypto.randomUUID()",
    "  }",
    ");",
    "",
    "const params = new URLSearchParams();",
    "params.append('grant_type', 'urn:ietf:params:oauth:grant-type:jwt-bearer');",
    "params.append('assertion', jwt_token);",
    "",
    "fetch(maskinporten_token_url, {",
    "  method: 'post',",
    "  headers: {'Content-Type': 'application/x-www-form-urlencoded'},",
    "  body: params",
    "})",
    ".then(res => res.json())",
    ".then(data => process.stdout.write(JSON.stringify(data)))"
  ],
  "java": [
    "package no.difi.oauth2.utils;",
    "",
    "import com.nimbusds.jose.JWSAlgorithm;",
    "import com.nimbusds.jose.JWSHeader;",
    "import com.nimbusds.jose.JWSSigner;",
    "import com.nimbusds.jose.crypto.RSASSASigner;",
    "import com.nimbusds.jose.util.Base64;",
    "import com.nimbusds.jwt.JWTClaimsSet;",
    "import com.nimbusds.jwt.SignedJWT;",
    "import org.apache.hc.client5.http.fluent.Form;",
    "import org.apache.hc.client5.http.fluent.Request;",
    "import org.apache.hc.client5.http.fluent.Response;",
    "import org.apache.hc.core5.http.ContentType;",
    "import org.apache.hc.core5.http.HttpEntity;",
    "import org.apache.hc.core5.http.io.entity.EntityUtils;",
    "import org.apache.hc.core5.http.message.BasicClassicHttpResponse;",
    "import java.io.FileInputStream;",
    "import java.security.KeyStore;",
    "import java.security.PrivateKey;",
    "import java.security.cert.X509Certificate;",
    "import java.time.Clock;",
    "import java.util.*;",
    "",
    "public class CertificateJwtGrantGenerator {",
    "",
    "    public static void main(String[] args) throws Exception {",
    "",
    "        // Variable som kommer fra integrasjonen",
    "        String integrasjonsid = \"__CLIENT_ID__\";",
    "        String scope = \"__SCOPE__\";",
    "",
    "        // Variable som avhengiger av milj√∏",
    "        String maskinportenAudience = \"__MASKINPORTEN_URL__\";",
    "        String maskinportenTokenUrl = \"__MASKINPORTEN_TOKEN_URL__\";",
    "",
    "        // Variable som avhenger av APIet du skal autentisere mot",
    "        String targetApiAudience = null; // Optional: Sjekk API-tilbyder om de spesifiserer en verdi for denne",
    "",
    "        // Variable som er tilpasset din keystore hvor du har lagret virksomhetssertifikatet ditt",
    "        String keystoreType = \"PKCS12\";",
    "        String pathToKeystore = \"pathToKeystore\";",
    "        String keystorepassword = \"keystorepassword\";",
    "        String aliasToVirksomhetssertifikat = \"virksomhetsserifikat-alias\";",
    "        String aliasPassword = \"myaliaspassword\";",
    "",
    "        KeyStore keyStore = KeyStore.getInstance(keystoreType);",
    "        keyStore.load(new FileInputStream(pathToKeystore), keystorepassword.toCharArray());",
    "        X509Certificate certificate = (X509Certificate) keyStore.getCertificate(aliasToVirksomhetssertifikat);",
    "",
    "        List<Base64> certChain = new ArrayList<>();",
    "        certChain.add(Base64.encode(certificate.getEncoded()));",
    "",
    "        JWSHeader jwtHeader = new JWSHeader.Builder(JWSAlgorithm.RS256)",
    "                .x509CertChain(certChain)",
    "                .build();",
    "",
    "        JWTClaimsSet claims = new JWTClaimsSet.Builder()",
    "                .audience(maskinportenAudience)",
    "                .issuer(integrasjonsid)",
    "                .claim(\"scope\", scope)",
    "                .claim(\"resource\", targetApiAudience)",
    "                .jwtID(UUID.randomUUID().toString()) // Must be unique for each grant",
    "                .issueTime(new Date(Clock.systemUTC().millis())) // Use UTC time",
    "                .expirationTime(new Date(Clock.systemUTC().millis() + 120000)) // Expiration time is 120 sec",
    "                .build();",
    "",
    "        PrivateKey privateKey = (PrivateKey) keyStore.getKey(aliasToVirksomhetssertifikat, aliasPassword.toCharArray());",
    "        JWSSigner signer = new RSASSASigner(privateKey);",
    "        SignedJWT signedJWT = new SignedJWT(jwtHeader, claims);",
    "        signedJWT.sign(signer);",
    "",
    "        String jwt = signedJWT.serialize();",
    "",
    "        List body = Form.form()",
    "                .add(\"grant_type\", \"urn:ietf:params:oauth:grant-type:jwt-bearer\")",
    "                .add(\"assertion\", jwt)",
    "                .build();",
    "        try {",
    "            Response response = Request.post(maskinportenTokenUrl)",
    "                    .addHeader(\"Content-Type\", ContentType.APPLICATION_FORM_URLENCODED.toString())",
    "                    .bodyForm(body)",
    "                    .execute();",
    "",
    "            HttpEntity e = ((BasicClassicHttpResponse) response.returnResponse()).getEntity();",
    "            String result = EntityUtils.toString(e);",
    "            System.out.println(result);",
    "",
    "            // Use access_token in result as authentication header to the service you wish to connect to",
    "",
    "        } catch (Exception e) {",
    "            e.printStackTrace();",
    "        }",
    "",
    "",
    "    }",
    "",
    "}",
    ""
  ],
  "python": [
    "import requests",
    "import uuid",
    "from jwcrypto import jwk, jwt",
    "from cryptography.hazmat.primitives import serialization",
    "import cryptography.hazmat.primitives.serialization.pkcs12",
    "from datetime import datetime, timezone",
    "import base64",
    "",
    "# Variables from integration",
    "scope = \"__SCOPE__\"",
    "integration_id = \"__CLIENT_ID__\"",
    "",
    "# Certificate info",
    "cert_path = \"__CERTIFICATE_PATH__\"",
    "cert_key = \"__CERTIFICATE_PASSWORD__\"",
    "",
    "# Environment specific variables",
    "maskinporten_audience = \"__MASKINPORTEN_URL__\"",
    "maskinporten_token = \"__MASKINPORTEN_TOKEN_URL__\"",
    "",
    "timestamp = int(datetime.now(timezone.utc).timestamp())",
    "",
    "with open(cert_path, \"rb\") as f:",
    "    (",
    "        private_key,",
    "        certificate,",
    "        additional_certificates,",
    "    ) = serialization.pkcs12.load_key_and_certificates(",
    "        f.read(), cert_key.encode()",
    "    )",
    "    private_key = jwk.JWK.from_pyca(key=private_key)",
    "f.closed",
    "",
    "jwt_cert = certificate.public_bytes(",
    "    encoding=serialization.Encoding.DER,",
    ")",
    "jwt_cert = base64.b64encode(jwt_cert).decode()",
    "",
    "jwt_header = {",
    "    'alg': 'RS256',",
    "    'x5c': [jwt_cert]",
    "}",
    "",
    "jwt_claims = {",
    "    'aud': maskinporten_audience,",
    "    'iss': integration_id,",
    "    'scope': scope,",
    "    #'resource': '', <-- if resource is needed for your specific API",
    "    'iat': timestamp,",
    "    'exp': timestamp+100,",
    "    'jti': str(uuid.uuid4())",
    "}",
    "",
    "jwt_token = jwt.JWT(",
    "  header = jwt_header,",
    "  claims = jwt_claims,",
    ")",
    "jwt_token.make_signed_token(private_key)",
    "signed_jwt = jwt_token.serialize()",
    "",
    "body = {",
    "  'grant_type': 'urn:ietf:params:oauth:grant-type:jwt-bearer',",
    "  'assertion': signed_jwt",
    "}",
    "",
    "res = requests.post(maskinporten_token, data=body)",
    "print(res.text)"
  ],
  "dependencies": {
    "node": {
      "npm": {
        "code": [
          "npm install node-fetch",
          "npm install jsonwebtoken",
          "npm install node-forge"
        ],
        "lang": "shell",
        "name": "NPM",
        "id": "npm"
      }
    },
    "python": {
      "pip": {
        "code": [
          "pip install requests",
          "pip install uuid",
          "pip install jwcrypto",
          "pip install cryptography",
          "pip install base64"
        ],
        "lang": "shell",
        "name": "PIP",
        "id": "pip"
      }
    },
    "java": {
      "maven": {
        "code": [
          "<dependency>",
          "    <groupId>com.nimbusds</groupId>",
          "    <artifactId>nimbus-jose-jwt</artifactId>",
          "    <version>9.31</version>",
          "</dependency>",
          "<dependency>",
          "    <groupId>org.apache.httpcomponents.client5</groupId>",
          "    <artifactId>httpclient5-fluent</artifactId>",
          "    <version>5.2.1</version>",
          "</dependency>",
          "<dependency>",
          "    <groupId>org.slf4j</groupId>",
          "    <artifactId>slf4j-log4j12</artifactId>",
          "    <version>1.6.6</version>",
          "</dependency>"
        ],
        "lang": "xml",
        "name": "Maven",
        "id": "maven"
      },
      "gradle": {
        "code": [
          "implementation \"com.nimbusds:nimbus-jose-jwt:9.31\"",
          "implementation \"org.apache.httpcomponents.client5:httpclient5-fluent:5.2.1\"",
          "implementation \"org.slf4j:slf4j-log4j12:1.6.6\""
        ],
        "lang": "gradle",
        "name": "Gradle",
        "id": "gradle"
      }
    }
  }
}
