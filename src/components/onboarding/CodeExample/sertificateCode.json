{
  "1": {
    "node": [
      "// Eksempel hentet fra",
      "// https://raw.githubusercontent.com/entur/exploratory-maskinporten-token/main/src/maskinporten.js",
      "",
      "",
      "const fetch = require('node-fetch');",
      "var jwt = require('jsonwebtoken');",
      "var fs = require('fs');",
      "const crypto = require('crypto');",
      "",
      "let certsPath = '../certs/maskinporten.pem';",
      "var privateKey = fs.readFileSync(certsPath);",
      "",

      "const generateToken = function (client) {",
      "  return jwt.sign(",
      "    {",
      "      \"scope\": client.scope, resource: [\"https://hoc-cluster-public-vault-e58f231b.dada9b17.z1.hashicorp.cloud\"]",
      "    },",
      "    privateKey, {",
      "      algorithm: 'RS256',",
      "      audience: \"https://test.maskinporten.no/\",",
      "      issuer: client.client_id,",
      "      header: {\"kid\": client.keyname},",
      "      expiresIn: 100,",
      "      jwtid: crypto.randomUUID()",
      "    });",
      "};",
      "",
      "",
      "const fetch_access_token = async function (client) {",
      "  const jwt = generateToken(client);",
      "  const grant = \"urn:ietf:params:oauth:grant-type:jwt-bearer\";",
      "  const params = new URLSearchParams();",
      "",
      "  params.append(\"grant_type\", grant);",
      "  params.append(\"assertion\", jwt);",
      "",
      "  const response = await fetch(`https://test.maskinporten.no/token`,",
      "    {",
      "      method: 'post',",
      "      headers: {'Content-Type': 'application/x-www-form-urlencoded'},",
      "      body: params",
      "    });",
      "",
      "  const data = await response.json();",
      "  return data;",
      "}"
    ],
    "java": [
      "public static void main(String[] args) throws Exception {",
      "",
      "        KeyStore keyStore = KeyStore.getInstance(\"JKS\");",
      "        String keystorepassword = \"keystorepassword\";",
      "        String alias = \"keystore cert alias\";",
      "",
      "        keyStore.load(new FileInputStream(\"pathToKeystore\"), keystorepassword.toCharArray());",
      "        X509Certificate certificate = (X509Certificate) keyStore.getCertificate(alias);",
      "",
      "        List<Base64> certChain = new ArrayList<>();",
      "        certChain.add(Base64.encode(certificate.getEncoded()));",
      "",
      "        JWSHeader jwtHeader = new JWSHeader.Builder(JWSAlgorithm.RS256)",
      "                .x509CertChain(certChain)",
      "                .build();",
      "",
      "        JWTClaimsSet claims = new JWTClaimsSet.Builder()",
      "                .audience(\"TODO maskinporten-milj√∏\")",
      "                .claim(\"resource\", \"<your intended audience>\")",
      "                .issuer(\"TODO clientid\")",
      "                .claim(\"scope\", \"TODO scope-from-client\")",
      "                .jwtID(UUID.randomUUID().toString()) // Must be unique for each grant",
      "                .issueTime(new Date(Clock.systemUTC().millis())) // Use UTC time!",
      "                .expirationTime(new Date(Clock.systemUTC().millis() + 120000)) // Expiration time is 120 sec.",
      "                .build();",
      "",
      "        PrivateKey privateKey = (PrivateKey) keyStore.getKey(alias, keystorepassword.toCharArray()); // Read from KeyStore",
      "        JWSSigner signer = new RSASSASigner(privateKey);",
      "        SignedJWT signedJWT = new SignedJWT(jwtHeader, claims);",
      "        signedJWT.sign(signer);",
      "",
      "        String jwt = signedJWT.serialize();",
      "",
      "        List body = Form.form()",
      "                .add(\"grant_type\", \"urn:ietf:params:oauth:grant-type:jwt-bearer\")",
      "                .add(\"assertion\", jwt)",
      "                .build();",
      "        try {",
      "            Response response = Request.post(\"TODO tokenendpoint\")",
      "                    .bodyForm(body)",
      "                    .execute();",
      "",
      "            HttpEntity e = ((BasicClassicHttpResponse) response.returnResponse()).getEntity();",
      "            String result = EntityUtils.toString(e);",
      "",
      "            // Use access_token in result as authentication header to the service you wish to connect to",
      "",
      "        } catch (Exception e) {",
      "            e.printStackTrace();",
      "        }",
      "",
      "",
      "    }"
    ],
    "python": [

    ]
  },
  "2": {
    "node": [
      "// Nothing yey"
    ],
    "java": [



    ],
    "python": [

    ]
  }
}